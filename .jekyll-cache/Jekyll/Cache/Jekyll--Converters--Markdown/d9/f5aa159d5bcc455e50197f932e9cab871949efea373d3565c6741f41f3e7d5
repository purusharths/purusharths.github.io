I"Ó"<p>There are great many tutorials out there for packaging. The RPM docs are meticuliously written covering all the details and error logs. I‚Äôm using this blogpost as my own personal scratchpad which I can rerfer to whenever needed.</p>

<h3 id="cmake-installations">CMake Installations</h3>

<ul>
  <li>Check in the build logs if the flags set in the CMake file are present in <code class="highlighter-rouge">rpm -E %{optflags}</code>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-O2 -g -pipe -Wall -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fexceptions 
-fstack-protector-strong -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -specs=/usr/lib/rpm/redhat/
redhat-annobin-cc1 -m64 -mtune=generic -fasynchronous-unwind-tables -fstack-clash-protection -fcf-protection
</code></pre></div>    </div>
    <ul>
      <li>
        <p>These are the flags that Fedora sets for packages, and <em>only</em> these must be set</p>
      </li>
      <li>
        <p>Check where in the CMakeLists.txt files upstream had hardcoded their flags: <a href="https://docs.fedoraproject.org/en-US/packaging-guidelines/#_compiler_flags">Fedora Default Compiler Flags</a></p>
      </li>
      <li>
        <p>PS: it isn‚Äôt forbidden to use other flags, but unless there‚Äôs a very good reason to do so, we stick to these. If for some reasons upstream package is not compiling without the hard-coded flags, we‚Äôd have to work with upstream to see why removing their flags breaks the compilation; and, if necessary we add them to the default set.
  However, the default flags are general enough and rarely cause such issues</p>
      </li>
      <li>
        <p>EXAMPLE: For tpcclib upstream used <code class="highlighter-rouge">-s</code>, which strips the binaries. Stripped binaries don‚Äôt generate debuginfo</p>
      </li>
      <li>
        <p>To search for the instance where different flags are used, search for general tokens like: <code class="highlighter-rouge">FLAGS/CFLAGS/CXXFLAGS</code></p>
      </li>
      <li>
        <p>CMakeList files are unique for each project. They‚Äôll use <code class="highlighter-rouge">cmake</code> directives, but apart from that they‚Äôre like code</p>
      </li>
    </ul>
  </li>
  <li>About ‚Äúbuild‚Äù tools <br />
    <ul>
      <li>
        <p>There are many different ‚Äúbuild‚Äù tools, <code class="highlighter-rouge">configure</code> is only used for ‚ÄúAutotools‚Äù. 
A <code class="highlighter-rouge">CMakeLists.txt</code> uses the cmake system. Make changes in %build as per the <code class="highlighter-rouge">cmake</code> guideline page</p>
      </li>
      <li>
        <p>When you‚Äôre in the build directory, you‚Äôll have to use <code class="highlighter-rouge">%cmake ..</code> Eg:</p>
        <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%install
pushd build
  %cmake ..
  %make_install
popd build
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Avoid Static Files/library 
(More on this later)</p>

    <ul>
      <li>All .a files are a static library and are generally avoided: <a href="https://docs.fedoraproject.org/en-US/packaging-guidelines/#packaging-static-libraries">https://docs.fedoraproject.org/en-US/packaging-guidelines/#packaging-static-libraries</a></li>
    </ul>
  </li>
  <li>GCC Issues
    <ul>
      <li>Ensure that the compilation flags are compatible with the current version of GCC (use <code class="highlighter-rouge">man gcc</code>)
        <ul>
          <li><a href="https://gcc.gnu.org/gcc-10/porting_to.html">https://gcc.gnu.org/gcc-10/porting_to.html</a></li>
          <li><a href="https://gcc.gnu.org/gcc-10/porting_to.html">https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Stay Close to the Upstream
    <ul>
      <li><a href="https://fedoraproject.org/wiki/Staying_close_to_upstream_projects">https://fedoraproject.org/wiki/Staying_close_to_upstream_projects</a></li>
    </ul>

    <p>set(CMAKE_INSTALL_PREFIX ‚Äú${CMAKE_BINARY_DIR}‚Äù CACHE PATH ‚ÄúDefault install path‚Äù FORCE) is present in CMAKELists.txt by default. my path removed the line. So this patch can be removed?</p>
  </li>
  <li>Use <code class="highlighter-rouge">git-format-patch</code> for generating patches
    <ul>
      <li>Download the tar.gz from the repo remote</li>
      <li>Initialize git repo</li>
      <li>Do a <code class="highlighter-rouge">git checkout -b &lt;branch-name&gt;</code></li>
      <li>Make changes and commit (DO NOT MERGE TO <code class="highlighter-rouge">master</code>)</li>
      <li>Switch back to master and;</li>
      <li><code class="highlighter-rouge">git format-patch &lt;branch-name&gt;</code></li>
      <li>Patch files will be created based on each commit in the <code class="highlighter-rouge">&lt;branch-name&gt;</code></li>
    </ul>
  </li>
  <li>Header files not found:
```
Yes, this one cannot find header files. However, for the successful builds in noarch, i686, and x86_64 all files were present.</li>
</ul>

<p>‚Äì Looking for include file stdint.h
‚Äì Looking for include file stdint.h - not found
‚Äì Looking for include file stddef.h
‚Äì Looking for include file stddef.h - not found
‚Äì Looking for include file math.h
‚Äì Looking for include file math.h - not found
‚Äì Looking for include file stddef.h
‚Äì Looking for include file stddef.h - not found
‚Äì Looking for include file direct.h
‚Äì Looking for include file direct.h - not found
‚Äì Looking for include file omp.h
‚Äì Looking for include file omp.h - not found
‚Äì Looking for isnan
‚Äì Looking for isnan - not found
‚Äì Looking for exp
‚Äì Looking for exp - not found
	```</p>

<p>Purusharth S, [05.05.20 21:08]
‚Äú # ‚Äúinstall‚Äù README and COPYING files to be included in the binary package‚Äù I thought these files are supposed to be kept seprately?</p>

<p>Purusharth S, [05.05.20 21:09]
Do-not-install-docs-to-libdir.patch</p>

<p>they detect a 32 bit compiler, they set the -msse2 flag
‚ÄúFor the x86-32 compiler, you must use -march=cpu-type, -msse or -msse2 switches to enable SSE extensions and make this option effective. For the x86-64 compiler, these extensions are enabled by default.‚Äù</p>

<p>now, -msse2 is <em>not</em> a valid option for arm: https://gcc.gnu.org/onlinedocs/gcc/ARM-Options.html</p>

<p>Join Fedora BOT, [05.05.20 21:20]</p>
<FranciscoD> So, when upstream set -msse2 for *all* 32bit systems, they broke the 32bit arm builds

Join Fedora BOT, [05.05.20 21:20]
<FranciscoD> So, this particular flag also had to be removed

rpm -E %cmake`, you'll see that the macro defines the standard library path for us in LIB_INSTALL_DIR, so simpler to just use that

### Devel Files


### Tools used
- Koji
- rpmbuild
- fedora-review
- mock

### Relevant Links
[https://fedoraproject.org/wiki/How_to_create_a_GNU_Hello_RPM_package](https://fedoraproject.org/wiki/How_to_create_a_GNU_Hello_RPM_package) <br />
[http://ftp.rpm.org/max-rpm/s1-rpm-inside-macros.html](http://ftp.rpm.org/max-rpm/s1-rpm-inside-macros.html) <br />
[https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing#Good_Licenses](https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing#Good_Licenses)<br />
[https://fedoramagazine.org/how-rpm-packages-are-made-the-spec-file/](https://fedoramagazine.org/how-rpm-packages-are-made-the-spec-file/)<br />
[https://docs.fedoraproject.org/en-US/packaging-guidelines/CMake/](https://docs.fedoraproject.org/en-US/packaging-guidelines/CMake/)<br />
[https://rpm.org/user_doc/autosetup.html](https://rpm.org/user_doc/autosetup.html)<br />
[https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch09s05s07.html](https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch09s05s07.html)<br />
[https://fedoraproject.org/wiki/Join_the_package_collection_maintainers](https://fedoraproject.org/wiki/Join_the_package_collection_maintainers)<br />
[https://apps.fedoraproject.org/packages/](https://apps.fedoraproject.org/packages/)
[FHS](http://www.pathname.com/fhs/pub/fhs-2.3.html)<br />
[Config Macros](http://ftp.rpm.org/api/4.4.2.2/config_macros.html)<br />
[Devel Packages](https://docs.fedoraproject.org/en-US/packaging-guidelines/#_devel_packages)<br />
[Compile Flags](https://docs.fedoraproject.org/en-US/packaging-guidelines/#_compiler_flags)<br />
[Useless or incomplete debuginfo packages due to packaging issues](https://fedoraproject.org/wiki/Packaging:Debuginfo#Useless_or_incomplete_debuginfo_packages_due_to_packaging_issues)<br />
[Filesystem Layout](https://docs.fedoraproject.org/en-US/packaging-guidelines/#_filesystem_layout)<br />
[Versioning](https://docs.fedoraproject.org/en-US/packaging-guidelines/Versioning/)<br />
https://docs.fedoraproject.org/en-US/packaging-guidelines/Versioning/#_snapshots
</FranciscoD></FranciscoD>
:ET